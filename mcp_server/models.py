# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T18:19:38+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, List, Optional
from uuid import UUID

from pydantic import BaseModel, ConfigDict, Field, RootModel, constr


class AccessType(Enum):
    readOnly = 'readOnly'
    full = 'full'
    custom = 'custom'


class AddOrUpdateIntegrationLinkModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    description: Optional[constr(max_length=1000)] = None
    url: Optional[constr(max_length=1000)] = None


class AddOrUpdateJiraIntegrationLinkModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    clientKey: constr(min_length=0, max_length=255)
    description: Optional[constr(min_length=0, max_length=1000)] = None
    jiraJwtToken: constr(min_length=0, max_length=15000)
    url: Optional[constr(min_length=0, max_length=1000)] = None


class AddUserToGroupRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    permissionGroupIds: List[int_aliased]


class AuditLogType(Enum):
    productCreated = 'productCreated'
    productChanged = 'productChanged'
    productOwnershipTransferred = 'productOwnershipTransferred'
    productDeleted = 'productDeleted'
    productsReordered = 'productsReordered'
    teamMemberInvited = 'teamMemberInvited'
    teamMemberInvitationRevoked = 'teamMemberInvitationRevoked'
    teamMemberJoined = 'teamMemberJoined'
    teamMemberPermissionGroupChanged = 'teamMemberPermissionGroupChanged'
    teamMemberRemoved = 'teamMemberRemoved'
    teamMemberLeft = 'teamMemberLeft'
    teamMemberInvitationChanged = 'teamMemberInvitationChanged'
    teamMemberInvitationResent = 'teamMemberInvitationResent'
    teamMemberInvitationRejected = 'teamMemberInvitationRejected'
    configCreated = 'configCreated'
    configChanged = 'configChanged'
    configDeleted = 'configDeleted'
    configsReordered = 'configsReordered'
    environmentCreated = 'environmentCreated'
    environmentChanged = 'environmentChanged'
    environmentDeleted = 'environmentDeleted'
    environmentsReordered = 'environmentsReordered'
    settingCreated = 'settingCreated'
    settingChanged = 'settingChanged'
    settingDeleted = 'settingDeleted'
    settingsReordered = 'settingsReordered'
    settingValueChanged = 'settingValueChanged'
    webHookCreated = 'webHookCreated'
    webHookChanged = 'webHookChanged'
    webHookDeleted = 'webHookDeleted'
    subscriptionChanged = 'subscriptionChanged'
    permissionGroupCreated = 'permissionGroupCreated'
    permissionGroupChanged = 'permissionGroupChanged'
    permissionGroupDeleted = 'permissionGroupDeleted'
    permissionGroupDefault = 'permissionGroupDefault'
    apiKeyAdded = 'apiKeyAdded'
    apiKeyRemoved = 'apiKeyRemoved'
    integrationAdded = 'integrationAdded'
    integrationChanged = 'integrationChanged'
    integrationRemoved = 'integrationRemoved'
    apiKeyConnected = 'apiKeyConnected'
    integrationLinkAdded = 'integrationLinkAdded'
    integrationLinkRemoved = 'integrationLinkRemoved'
    organizationAdded = 'organizationAdded'
    organizationRemoved = 'organizationRemoved'
    organizationChanged = 'organizationChanged'
    organizationSubscriptionTypeChanged = 'organizationSubscriptionTypeChanged'
    organizationAdminChanged = 'organizationAdminChanged'
    organizationAdminLeft = 'organizationAdminLeft'
    organizationAdminDisabled2FA = 'organizationAdminDisabled2FA'
    tagAdded = 'tagAdded'
    tagChanged = 'tagChanged'
    tagRemoved = 'tagRemoved'
    settingTagAdded = 'settingTagAdded'
    settingTagRemoved = 'settingTagRemoved'
    publicApiAccessTokenAdded = 'publicApiAccessTokenAdded'
    publicApiAccessTokenRemoved = 'publicApiAccessTokenRemoved'
    domainAdded = 'domainAdded'
    domainVerified = 'domainVerified'
    domainRemoved = 'domainRemoved'
    domainSamlConfigured = 'domainSamlConfigured'
    domainSamlDeleted = 'domainSamlDeleted'
    autoProvisioningConfigurationChanged = 'autoProvisioningConfigurationChanged'
    organizationMemberJoined = 'organizationMemberJoined'
    organizationMemberProductJoinRequested = 'organizationMemberProductJoinRequested'
    organizationMemberProductJoinRequestRejected = (
        'organizationMemberProductJoinRequestRejected'
    )
    organizationMemberProductJoinRequestApproved = (
        'organizationMemberProductJoinRequestApproved'
    )
    codeReferencesUploaded = 'codeReferencesUploaded'
    codeReferenceDeleted = 'codeReferenceDeleted'
    codeReferenceStaleBranchDeleted = 'codeReferenceStaleBranchDeleted'
    segmentCreated = 'segmentCreated'
    segmentChanged = 'segmentChanged'
    segmentDeleted = 'segmentDeleted'
    webhookSigningKeyDeleted = 'webhookSigningKeyDeleted'
    webhookSigningKeyCreated = 'webhookSigningKeyCreated'


class FieldLinks(BaseModel):
    members: Optional[str] = None
    products: Optional[str] = None


class Organization(BaseModel):
    field_links: Optional[FieldLinks] = Field(None, alias='_links')
    name: Optional[str] = None
    organizationId: Optional[UUID] = None


class FieldEmbedded1(BaseModel):
    organization: Optional[Organization] = None


class FieldLinks1(BaseModel):
    configs: Optional[str] = None
    environments: Optional[str] = None
    members: Optional[str] = None
    permission_groups: Optional[str] = Field(None, alias='permission-groups')
    segments: Optional[str] = None
    self: Optional[str] = None
    tags: Optional[str] = None


class Product(BaseModel):
    field_embedded: Optional[FieldEmbedded1] = Field(None, alias='_embedded')
    field_links: Optional[FieldLinks1] = Field(None, alias='_links')
    description: Optional[str] = None
    name: Optional[str] = None
    order: Optional[int_aliased] = None
    productId: Optional[UUID] = None
    reasonRequired: Optional[bool] = None


class FieldEmbedded(BaseModel):
    product: Optional[Product] = None


class FieldLinks2(BaseModel):
    self: Optional[str] = None
    settings: Optional[str] = None


class ConfigModelHaljson(BaseModel):
    field_embedded: Optional[FieldEmbedded] = Field(None, alias='_embedded')
    field_links: Optional[FieldLinks2] = Field(None, alias='_links')
    configId: Optional[UUID] = None
    description: Optional[str] = None
    name: Optional[str] = None
    order: Optional[int_aliased] = None


class ConnectRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    clientKey: constr(min_length=0, max_length=255)
    jiraJwtToken: constr(min_length=0, max_length=15000)


class CreateConfigRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    description: Optional[constr(min_length=0, max_length=1000)] = None
    name: constr(min_length=0, max_length=255)


class CreateEnvironmentModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    color: Optional[constr(min_length=0, max_length=255)] = None
    description: Optional[constr(min_length=0, max_length=1000)] = None
    name: constr(min_length=0, max_length=255)


class CreateProductRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    description: Optional[constr(min_length=0, max_length=1000)] = None
    name: constr(min_length=0, max_length=1000)


class CreateTagModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    color: Optional[constr(min_length=0, max_length=255)] = None
    name: constr(min_length=0, max_length=255)


class DeleteIntegrationLinkModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    hasRemainingIntegrationLink: Optional[bool] = None


class DeleteRepositoryReportsRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    branch: Optional[constr(min_length=0, max_length=255)] = Field(
        None,
        description="If it's set, only this branch's reports belonging to the given repository will be deleted.",
    )
    configId: UUID = Field(
        ...,
        description="The Config's identifier from where the reports should be deleted.",
    )
    repository: constr(min_length=0, max_length=255) = Field(
        ...,
        description="The source control repository which's reports should be deleted.",
    )
    settingId: Optional[int_aliased] = Field(
        None,
        description="If it's set, only this setting's reports belonging to the given repository will be deleted.",
    )


class EnvironmentAccessType(Enum):
    full = 'full'
    readOnly = 'readOnly'
    none = 'none'


class FieldLinks3(BaseModel):
    members: Optional[str] = None
    products: Optional[str] = None


class Organization1(BaseModel):
    field_links: Optional[FieldLinks3] = Field(None, alias='_links')
    name: Optional[str] = None
    organizationId: Optional[UUID] = None


class FieldEmbedded3(BaseModel):
    organization: Optional[Organization1] = None


class FieldLinks4(BaseModel):
    configs: Optional[str] = None
    environments: Optional[str] = None
    members: Optional[str] = None
    permission_groups: Optional[str] = Field(None, alias='permission-groups')
    segments: Optional[str] = None
    self: Optional[str] = None
    tags: Optional[str] = None


class Product1(BaseModel):
    field_embedded: Optional[FieldEmbedded3] = Field(None, alias='_embedded')
    field_links: Optional[FieldLinks4] = Field(None, alias='_links')
    description: Optional[str] = None
    name: Optional[str] = None
    order: Optional[int_aliased] = None
    productId: Optional[UUID] = None
    reasonRequired: Optional[bool] = None


class FieldEmbedded2(BaseModel):
    product: Optional[Product1] = None


class FieldLinks5(BaseModel):
    self: Optional[str] = None


class EnvironmentModelHaljson(BaseModel):
    field_embedded: Optional[FieldEmbedded2] = Field(None, alias='_embedded')
    field_links: Optional[FieldLinks5] = Field(None, alias='_links')
    color: Optional[str] = None
    description: Optional[str] = None
    environmentId: Optional[UUID] = None
    name: Optional[str] = None
    order: Optional[int_aliased] = None
    reasonRequired: Optional[bool] = None


class InitialValue(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    environmentId: Optional[UUID] = Field(
        None,
        description='The ID of the Environment where the initial value should be set.',
    )
    value: Optional[Any] = Field(
        None,
        description='The initial value in the given Environment. It must respect the setting type.',
    )


class IntegrationLinkType(Enum):
    trello = 'trello'
    jira = 'jira'
    monday = 'monday'


class InviteMembersRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    emails: List[str]
    permissionGroupId: int_aliased


class JsonNodeOptions(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    propertyNameCaseInsensitive: Optional[bool] = None


class JsonPointerKind(Enum):
    unspecified = 'unspecified'
    plain = 'plain'
    uriEncoded = 'uriEncoded'


class MeModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    email: Optional[str] = None
    fullName: Optional[str] = None


class MemberModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    email: Optional[str] = None
    fullName: Optional[str] = None
    permissionGroupId: Optional[int_aliased] = None
    productId: Optional[UUID] = None
    userId: Optional[str] = None


class OperationType(Enum):
    unknown = 'unknown'
    add = 'add'
    remove = 'remove'
    replace = 'replace'
    move = 'move'
    copy = 'copy'
    test = 'test'


class OrganizationModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: Optional[str] = None
    organizationId: Optional[UUID] = None


class FieldLinks6(BaseModel):
    members: Optional[str] = None
    products: Optional[str] = None


class OrganizationModelHaljson(BaseModel):
    field_links: Optional[FieldLinks6] = Field(None, alias='_links')
    name: Optional[str] = None
    organizationId: Optional[UUID] = None


class Organization2(BaseModel):
    field_links: Optional[FieldLinks6] = Field(None, alias='_links')
    name: Optional[str] = None
    organizationId: Optional[UUID] = None


class FieldEmbedded5(BaseModel):
    organization: Optional[Organization2] = None


class FieldLinks8(BaseModel):
    configs: Optional[str] = None
    environments: Optional[str] = None
    members: Optional[str] = None
    permission_groups: Optional[str] = Field(None, alias='permission-groups')
    segments: Optional[str] = None
    self: Optional[str] = None
    tags: Optional[str] = None


class Product2(BaseModel):
    field_embedded: Optional[FieldEmbedded5] = Field(None, alias='_embedded')
    field_links: Optional[FieldLinks8] = Field(None, alias='_links')
    description: Optional[str] = None
    name: Optional[str] = None
    order: Optional[int_aliased] = None
    productId: Optional[UUID] = None
    reasonRequired: Optional[bool] = None


class FieldEmbedded4(BaseModel):
    product: Optional[Product2] = None


class FieldLinks9(BaseModel):
    self: Optional[str] = None


class PointerSegment(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    source: Optional[str] = None
    value: Optional[str] = None


class ProductModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    description: Optional[str] = None
    name: Optional[str] = None
    order: Optional[int_aliased] = None
    organization: Optional[OrganizationModel] = None
    productId: Optional[UUID] = None
    reasonRequired: Optional[bool] = None


class FieldLinks10(BaseModel):
    members: Optional[str] = None
    products: Optional[str] = None


class Organization3(BaseModel):
    field_links: Optional[FieldLinks10] = Field(None, alias='_links')
    name: Optional[str] = None
    organizationId: Optional[UUID] = None


class FieldEmbedded6(BaseModel):
    organization: Optional[Organization3] = None


class FieldLinks11(BaseModel):
    configs: Optional[str] = None
    environments: Optional[str] = None
    members: Optional[str] = None
    permission_groups: Optional[str] = Field(None, alias='permission-groups')
    segments: Optional[str] = None
    self: Optional[str] = None
    tags: Optional[str] = None


class ProductModelHaljson(BaseModel):
    field_embedded: Optional[FieldEmbedded6] = Field(None, alias='_embedded')
    field_links: Optional[FieldLinks11] = Field(None, alias='_links')
    description: Optional[str] = None
    name: Optional[str] = None
    order: Optional[int_aliased] = None
    productId: Optional[UUID] = None
    reasonRequired: Optional[bool] = None


class ReferenceLine(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    lineNumber: int_aliased = Field(
        ..., description='The line number of the reference line.'
    )
    lineText: Optional[constr(min_length=0, max_length=1000)] = Field(
        None, description='The content of the reference line.'
    )


class ReferenceLines(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    file: constr(min_length=0, max_length=255) = Field(
        ...,
        description="The file's name in where the code reference has been found. (Appears on the ConfigCat Dashboard)",
    )
    fileUrl: Optional[constr(min_length=0, max_length=1000)] = Field(
        None,
        description="The file's url. (Used to point to the file on the repository's website)",
    )
    postLines: Optional[List[ReferenceLine]] = Field(
        None, description='The lines after the actual reference line.'
    )
    preLines: Optional[List[ReferenceLine]] = Field(
        None, description='The lines before the actual reference line.'
    )
    referenceLine: ReferenceLine


class RolloutPercentageItemModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    percentage: int_aliased = Field(
        ..., description='The percentage value for the rule.'
    )
    value: Optional[Any] = Field(
        None,
        description='The value to serve when the user falls in the percentage rule. It must respect the setting type.',
    )


class RolloutRuleComparator(Enum):
    isOneOf = 'isOneOf'
    isNotOneOf = 'isNotOneOf'
    contains = 'contains'
    doesNotContain = 'doesNotContain'
    semVerIsOneOf = 'semVerIsOneOf'
    semVerIsNotOneOf = 'semVerIsNotOneOf'
    semVerLess = 'semVerLess'
    semVerLessOrEquals = 'semVerLessOrEquals'
    semVerGreater = 'semVerGreater'
    semVerGreaterOrEquals = 'semVerGreaterOrEquals'
    numberEquals = 'numberEquals'
    numberDoesNotEqual = 'numberDoesNotEqual'
    numberLess = 'numberLess'
    numberLessOrEquals = 'numberLessOrEquals'
    numberGreater = 'numberGreater'
    numberGreaterOrEquals = 'numberGreaterOrEquals'
    sensitiveIsOneOf = 'sensitiveIsOneOf'
    sensitiveIsNotOneOf = 'sensitiveIsNotOneOf'


class SdkKeysModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    primary: Optional[str] = None
    secondary: Optional[str] = None


class SegmentComparator(Enum):
    isIn = 'isIn'
    isNotIn = 'isNotIn'


class SegmentListModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    createdAt: Optional[datetime] = None
    creatorEmail: Optional[str] = None
    creatorFullName: Optional[str] = None
    description: Optional[str] = None
    lastUpdaterEmail: Optional[str] = None
    lastUpdaterFullName: Optional[str] = None
    name: Optional[str] = None
    product: Optional[ProductModel] = None
    segmentId: Optional[UUID] = None
    updatedAt: Optional[datetime] = None
    usage: Optional[int_aliased] = None


class FieldLinks12(BaseModel):
    members: Optional[str] = None
    products: Optional[str] = None


class Organization4(BaseModel):
    field_links: Optional[FieldLinks12] = Field(None, alias='_links')
    name: Optional[str] = None
    organizationId: Optional[UUID] = None


class FieldEmbedded8(BaseModel):
    organization: Optional[Organization4] = None


class FieldLinks13(BaseModel):
    configs: Optional[str] = None
    environments: Optional[str] = None
    members: Optional[str] = None
    permission_groups: Optional[str] = Field(None, alias='permission-groups')
    segments: Optional[str] = None
    self: Optional[str] = None
    tags: Optional[str] = None


class Product3(BaseModel):
    field_embedded: Optional[FieldEmbedded8] = Field(None, alias='_embedded')
    field_links: Optional[FieldLinks13] = Field(None, alias='_links')
    description: Optional[str] = None
    name: Optional[str] = None
    order: Optional[int_aliased] = None
    productId: Optional[UUID] = None
    reasonRequired: Optional[bool] = None


class FieldEmbedded7(BaseModel):
    product: Optional[Product3] = None


class FieldLinks14(BaseModel):
    self: Optional[str] = None


class SegmentListModelHaljson(BaseModel):
    field_embedded: Optional[FieldEmbedded7] = Field(None, alias='_embedded')
    field_links: Optional[FieldLinks14] = Field(None, alias='_links')
    createdAt: Optional[datetime] = None
    creatorEmail: Optional[str] = None
    creatorFullName: Optional[str] = None
    description: Optional[str] = None
    lastUpdaterEmail: Optional[str] = None
    lastUpdaterFullName: Optional[str] = None
    name: Optional[str] = None
    segmentId: Optional[UUID] = None
    updatedAt: Optional[datetime] = None
    usage: Optional[int_aliased] = None


class SegmentModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    comparator: Optional[RolloutRuleComparator] = None
    comparisonAttribute: Optional[str] = None
    comparisonValue: Optional[str] = None
    createdAt: Optional[datetime] = None
    creatorEmail: Optional[str] = None
    creatorFullName: Optional[str] = None
    description: Optional[str] = None
    lastUpdaterEmail: Optional[str] = None
    lastUpdaterFullName: Optional[str] = None
    name: Optional[str] = None
    product: Optional[ProductModel] = None
    segmentId: Optional[UUID] = None
    updatedAt: Optional[datetime] = None


class FieldLinks15(BaseModel):
    members: Optional[str] = None
    products: Optional[str] = None


class Organization5(BaseModel):
    field_links: Optional[FieldLinks15] = Field(None, alias='_links')
    name: Optional[str] = None
    organizationId: Optional[UUID] = None


class FieldEmbedded10(BaseModel):
    organization: Optional[Organization5] = None


class FieldLinks16(BaseModel):
    configs: Optional[str] = None
    environments: Optional[str] = None
    members: Optional[str] = None
    permission_groups: Optional[str] = Field(None, alias='permission-groups')
    segments: Optional[str] = None
    self: Optional[str] = None
    tags: Optional[str] = None


class Product4(BaseModel):
    field_embedded: Optional[FieldEmbedded10] = Field(None, alias='_embedded')
    field_links: Optional[FieldLinks16] = Field(None, alias='_links')
    description: Optional[str] = None
    name: Optional[str] = None
    order: Optional[int_aliased] = None
    productId: Optional[UUID] = None
    reasonRequired: Optional[bool] = None


class FieldEmbedded9(BaseModel):
    product: Optional[Product4] = None


class FieldLinks17(BaseModel):
    self: Optional[str] = None


class SegmentModelHaljson(BaseModel):
    field_embedded: Optional[FieldEmbedded9] = Field(None, alias='_embedded')
    field_links: Optional[FieldLinks17] = Field(None, alias='_links')
    comparator: Optional[RolloutRuleComparator] = None
    comparisonAttribute: Optional[str] = None
    comparisonValue: Optional[str] = None
    createdAt: Optional[datetime] = None
    creatorEmail: Optional[str] = None
    creatorFullName: Optional[str] = None
    description: Optional[str] = None
    lastUpdaterEmail: Optional[str] = None
    lastUpdaterFullName: Optional[str] = None
    name: Optional[str] = None
    segmentId: Optional[UUID] = None
    updatedAt: Optional[datetime] = None


class FieldLinks18(BaseModel):
    members: Optional[str] = None
    products: Optional[str] = None


class Organization6(BaseModel):
    field_links: Optional[FieldLinks18] = Field(None, alias='_links')
    name: Optional[str] = None
    organizationId: Optional[UUID] = None


class FieldEmbedded13(BaseModel):
    organization: Optional[Organization6] = None


class FieldLinks19(BaseModel):
    configs: Optional[str] = None
    environments: Optional[str] = None
    members: Optional[str] = None
    permission_groups: Optional[str] = Field(None, alias='permission-groups')
    segments: Optional[str] = None
    self: Optional[str] = None
    tags: Optional[str] = None


class Product5(BaseModel):
    field_embedded: Optional[FieldEmbedded13] = Field(None, alias='_embedded')
    field_links: Optional[FieldLinks19] = Field(None, alias='_links')
    description: Optional[str] = None
    name: Optional[str] = None
    order: Optional[int_aliased] = None
    productId: Optional[UUID] = None
    reasonRequired: Optional[bool] = None


class FieldEmbedded12(BaseModel):
    product: Optional[Product5] = None


class FieldLinks20(BaseModel):
    self: Optional[str] = None


class Tag(BaseModel):
    field_embedded: Optional[FieldEmbedded12] = Field(None, alias='_embedded')
    field_links: Optional[FieldLinks20] = Field(None, alias='_links')
    color: Optional[str] = None
    name: Optional[str] = None
    tagId: Optional[int_aliased] = None


class FieldEmbedded11(BaseModel):
    tags: Optional[List[Tag]] = None


class SettingTagModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    color: Optional[str] = None
    name: Optional[str] = None
    settingTagId: Optional[int_aliased] = None
    tagId: Optional[int_aliased] = None


class SettingType(Enum):
    boolean = 'boolean'
    string = 'string'
    int = 'int'
    double = 'double'


class FieldLinks22(BaseModel):
    members: Optional[str] = None
    products: Optional[str] = None


class Organization7(BaseModel):
    field_links: Optional[FieldLinks22] = Field(None, alias='_links')
    name: Optional[str] = None
    organizationId: Optional[UUID] = None


class FieldEmbedded16(BaseModel):
    organization: Optional[Organization7] = None


class FieldLinks23(BaseModel):
    configs: Optional[str] = None
    environments: Optional[str] = None
    members: Optional[str] = None
    permission_groups: Optional[str] = Field(None, alias='permission-groups')
    segments: Optional[str] = None
    self: Optional[str] = None
    tags: Optional[str] = None


class Product6(BaseModel):
    field_embedded: Optional[FieldEmbedded16] = Field(None, alias='_embedded')
    field_links: Optional[FieldLinks23] = Field(None, alias='_links')
    description: Optional[str] = None
    name: Optional[str] = None
    order: Optional[int_aliased] = None
    productId: Optional[UUID] = None
    reasonRequired: Optional[bool] = None


class FieldEmbedded15(BaseModel):
    product: Optional[Product6] = None


class FieldLinks24(BaseModel):
    self: Optional[str] = None
    settings: Optional[str] = None


class Config(BaseModel):
    field_embedded: Optional[FieldEmbedded15] = Field(None, alias='_embedded')
    field_links: Optional[FieldLinks24] = Field(None, alias='_links')
    configId: Optional[UUID] = None
    description: Optional[str] = None
    name: Optional[str] = None
    order: Optional[int_aliased] = None


class FieldLinks25(BaseModel):
    members: Optional[str] = None
    products: Optional[str] = None


class Organization8(BaseModel):
    field_links: Optional[FieldLinks25] = Field(None, alias='_links')
    name: Optional[str] = None
    organizationId: Optional[UUID] = None


class FieldEmbedded18(BaseModel):
    organization: Optional[Organization8] = None


class FieldLinks26(BaseModel):
    configs: Optional[str] = None
    environments: Optional[str] = None
    members: Optional[str] = None
    permission_groups: Optional[str] = Field(None, alias='permission-groups')
    segments: Optional[str] = None
    self: Optional[str] = None
    tags: Optional[str] = None


class Product7(BaseModel):
    field_embedded: Optional[FieldEmbedded18] = Field(None, alias='_embedded')
    field_links: Optional[FieldLinks26] = Field(None, alias='_links')
    description: Optional[str] = None
    name: Optional[str] = None
    order: Optional[int_aliased] = None
    productId: Optional[UUID] = None
    reasonRequired: Optional[bool] = None


class FieldEmbedded17(BaseModel):
    product: Optional[Product7] = None


class FieldLinks27(BaseModel):
    self: Optional[str] = None


class Environment(BaseModel):
    field_embedded: Optional[FieldEmbedded17] = Field(None, alias='_embedded')
    field_links: Optional[FieldLinks27] = Field(None, alias='_links')
    color: Optional[str] = None
    description: Optional[str] = None
    environmentId: Optional[UUID] = None
    name: Optional[str] = None
    order: Optional[int_aliased] = None
    reasonRequired: Optional[bool] = None


class IntegrationLink(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    description: Optional[str] = None
    integrationLinkType: Optional[IntegrationLinkType] = None
    key: Optional[str] = None
    url: Optional[str] = None


class Setting(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    createdAt: Optional[datetime] = None
    creatorEmail: Optional[str] = None
    creatorFullName: Optional[str] = None
    hint: Optional[str] = None
    isWatching: Optional[bool] = None
    key: Optional[str] = None
    name: Optional[str] = None
    order: Optional[int_aliased] = None
    settingId: Optional[int_aliased] = None
    settingType: Optional[SettingType] = None


class SettingTag(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    color: Optional[str] = None
    name: Optional[str] = None
    settingTagId: Optional[int_aliased] = None
    tagId: Optional[int_aliased] = None


class FieldEmbedded14(BaseModel):
    config: Optional[Config] = None
    environment: Optional[Environment] = None
    integrationLinks: Optional[List[IntegrationLink]] = None
    setting: Optional[Setting] = None
    settingTags: Optional[List[SettingTag]] = None


class TagModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    color: Optional[str] = None
    name: Optional[str] = None
    product: Optional[ProductModel] = None
    tagId: Optional[int_aliased] = None


class FieldLinks29(BaseModel):
    members: Optional[str] = None
    products: Optional[str] = None


class Organization9(BaseModel):
    field_links: Optional[FieldLinks29] = Field(None, alias='_links')
    name: Optional[str] = None
    organizationId: Optional[UUID] = None


class FieldEmbedded20(BaseModel):
    organization: Optional[Organization9] = None


class FieldLinks30(BaseModel):
    configs: Optional[str] = None
    environments: Optional[str] = None
    members: Optional[str] = None
    permission_groups: Optional[str] = Field(None, alias='permission-groups')
    segments: Optional[str] = None
    self: Optional[str] = None
    tags: Optional[str] = None


class Product8(BaseModel):
    field_embedded: Optional[FieldEmbedded20] = Field(None, alias='_embedded')
    field_links: Optional[FieldLinks30] = Field(None, alias='_links')
    description: Optional[str] = None
    name: Optional[str] = None
    order: Optional[int_aliased] = None
    productId: Optional[UUID] = None
    reasonRequired: Optional[bool] = None


class FieldEmbedded19(BaseModel):
    product: Optional[Product8] = None


class FieldLinks31(BaseModel):
    self: Optional[str] = None


class TagModelHaljson(BaseModel):
    field_embedded: Optional[FieldEmbedded19] = Field(None, alias='_embedded')
    field_links: Optional[FieldLinks31] = Field(None, alias='_links')
    color: Optional[str] = None
    name: Optional[str] = None
    tagId: Optional[int_aliased] = None


class UpdateConfigRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    description: Optional[constr(min_length=0, max_length=1000)] = None
    name: Optional[constr(min_length=0, max_length=255)] = None


class UpdateEnvironmentModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    color: Optional[constr(min_length=0, max_length=255)] = None
    description: Optional[constr(min_length=0, max_length=1000)] = None
    name: Optional[constr(min_length=0, max_length=255)] = None


class UpdateProductRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    description: Optional[constr(min_length=0, max_length=1000)] = None
    name: Optional[constr(min_length=0, max_length=1000)] = None


class UpdateSegmentModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    comparator: Optional[RolloutRuleComparator] = None
    comparisonAttribute: Optional[constr(min_length=0, max_length=1000)] = None
    comparisonValue: Optional[constr(min_length=0, max_length=65535)] = None
    description: Optional[constr(min_length=0, max_length=1000)] = None
    name: Optional[constr(min_length=0, max_length=255)] = None


class UpdateTagModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    color: Optional[constr(min_length=0, max_length=255)] = None
    name: Optional[constr(min_length=0, max_length=255)] = None


class UserModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    email: Optional[str] = None
    fullName: Optional[str] = None
    userId: Optional[str] = None


class V1OrganizationsGetResponse(RootModel[List[OrganizationModelHaljson]]):
    root: List[OrganizationModelHaljson]


class V1OrganizationsGetResponse1(RootModel[List[OrganizationModel]]):
    root: List[OrganizationModel]


class V1OrganizationsOrganizationIdMembersGetResponse(RootModel[List[UserModel]]):
    root: List[UserModel]


class V1ProductsGetResponse(RootModel[List[ProductModelHaljson]]):
    root: List[ProductModelHaljson]


class V1ProductsGetResponse1(RootModel[List[ProductModel]]):
    root: List[ProductModel]


class V1ProductsProductIdConfigsGetResponse(RootModel[List[ConfigModelHaljson]]):
    root: List[ConfigModelHaljson]


class V1ProductsProductIdEnvironmentsGetResponse(
    RootModel[List[EnvironmentModelHaljson]]
):
    root: List[EnvironmentModelHaljson]


class V1ProductsProductIdMembersGetResponse(RootModel[List[MemberModel]]):
    root: List[MemberModel]


class V1ProductsProductIdSegmentsGetResponse(RootModel[List[SegmentListModelHaljson]]):
    root: List[SegmentListModelHaljson]


class V1ProductsProductIdSegmentsGetResponse1(RootModel[List[SegmentListModel]]):
    root: List[SegmentListModel]


class V1ProductsProductIdTagsGetResponse(RootModel[List[TagModelHaljson]]):
    root: List[TagModelHaljson]


class V1ProductsProductIdTagsGetResponse1(RootModel[List[TagModel]]):
    root: List[TagModel]


class AuditLogItemModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    actionTarget: Optional[str] = None
    auditLogDateTime: Optional[datetime] = None
    auditLogId: Optional[int_aliased] = None
    auditLogType: Optional[str] = None
    auditLogTypeEnum: Optional[AuditLogType] = None
    details: Optional[str] = None
    userEmail: Optional[str] = None
    userName: Optional[str] = None
    where: Optional[str] = None
    why: Optional[str] = None


class ConfigModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    configId: Optional[UUID] = None
    description: Optional[str] = None
    name: Optional[str] = None
    order: Optional[int_aliased] = None
    product: Optional[ProductModel] = None


class CreateOrUpdateEnvironmentAccessModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    color: Optional[str] = None
    description: Optional[str] = None
    environmentAccessType: Optional[EnvironmentAccessType] = None
    environmentId: Optional[UUID] = None
    name: Optional[str] = None
    order: Optional[int_aliased] = None
    reasonRequired: Optional[bool] = None


class CreatePermissionGroupRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    accessType: Optional[AccessType] = None
    canCreateOrUpdateConfig: Optional[bool] = None
    canCreateOrUpdateEnvironment: Optional[bool] = None
    canCreateOrUpdateSegments: Optional[bool] = None
    canCreateOrUpdateSetting: Optional[bool] = None
    canCreateOrUpdateTag: Optional[bool] = None
    canDeleteConfig: Optional[bool] = None
    canDeleteEnvironment: Optional[bool] = None
    canDeleteSegments: Optional[bool] = None
    canDeleteSetting: Optional[bool] = None
    canDeleteTag: Optional[bool] = None
    canManageIntegrations: Optional[bool] = None
    canManageMembers: Optional[bool] = None
    canManageProductPreferences: Optional[bool] = None
    canManageWebhook: Optional[bool] = None
    canRotateSdkKey: Optional[bool] = None
    canTagSetting: Optional[bool] = None
    canUseExportImport: Optional[bool] = None
    canViewProductAuditLog: Optional[bool] = None
    canViewProductStatistics: Optional[bool] = None
    canViewSdkKey: Optional[bool] = None
    environmentAccesses: Optional[List[CreateOrUpdateEnvironmentAccessModel]] = None
    name: constr(min_length=0, max_length=255)
    newEnvironmentAccessType: Optional[EnvironmentAccessType] = None


class CreateSegmentModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    comparator: RolloutRuleComparator
    comparisonAttribute: constr(min_length=0, max_length=1000)
    comparisonValue: constr(min_length=0, max_length=65535)
    description: Optional[constr(min_length=0, max_length=1000)] = None
    name: constr(min_length=0, max_length=255)


class CreateSettingInitialValues(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    hint: Optional[constr(min_length=0, max_length=1000)] = Field(
        None,
        description='A short description for the setting, shown on the Dashboard UI.',
    )
    initialValues: Optional[List[InitialValue]] = Field(
        None,
        description='Optional, initial values of the feature flag or setting in the given Environments.',
    )
    key: constr(pattern=r'^[a-zA-Z]+[a-zA-Z0-9_]*', min_length=0, max_length=255) = (
        Field(..., description='The key of the setting.')
    )
    name: constr(min_length=0, max_length=255) = Field(
        ..., description='The name of the setting, shown on the Dashboard UI.'
    )
    settingType: SettingType
    tags: Optional[List[int_aliased]] = Field(
        None, description='The IDs of the tags which are attached to the setting.'
    )


class EnvironmentAccessModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    color: Optional[str] = None
    description: Optional[str] = None
    environmentAccessType: Optional[EnvironmentAccessType] = None
    environmentId: Optional[UUID] = None
    name: Optional[str] = None
    order: Optional[int_aliased] = None
    reasonRequired: Optional[bool] = None


class EnvironmentModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    color: Optional[str] = None
    description: Optional[str] = None
    environmentId: Optional[UUID] = None
    name: Optional[str] = None
    order: Optional[int_aliased] = None
    product: Optional[ProductModel] = None
    reasonRequired: Optional[bool] = None


class FlagReference(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    references: List[ReferenceLines] = Field(
        ..., description='The actual references to the given Feature Flag or Setting.'
    )
    settingId: int_aliased = Field(
        ...,
        description='The identifier of the Feature Flag or Setting the code reference belongs to.',
    )


class IntegrationLinkModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    description: Optional[str] = None
    integrationLinkType: Optional[IntegrationLinkType] = None
    key: Optional[str] = None
    url: Optional[str] = None


class JsonNode(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    options: Optional[JsonNodeOptions] = None
    parent: Optional[JsonNode] = None
    root: Optional[JsonNode] = None


class JsonPointer(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    isUriEncoded: Optional[bool] = None
    kind: Optional[JsonPointerKind] = None
    segments: Optional[List[PointerSegment]] = None
    source: Optional[str] = None


class PatchOperation(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    from_: Optional[JsonPointer] = Field(None, alias='from')
    op: Optional[OperationType] = None
    path: Optional[JsonPointer] = None
    value: Optional[JsonNode] = None


class PermissionGroupModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    accessType: Optional[AccessType] = None
    canCreateOrUpdateConfig: Optional[bool] = None
    canCreateOrUpdateEnvironment: Optional[bool] = None
    canCreateOrUpdateSegments: Optional[bool] = None
    canCreateOrUpdateSetting: Optional[bool] = None
    canCreateOrUpdateTag: Optional[bool] = None
    canDeleteConfig: Optional[bool] = None
    canDeleteEnvironment: Optional[bool] = None
    canDeleteSegments: Optional[bool] = None
    canDeleteSetting: Optional[bool] = None
    canDeleteTag: Optional[bool] = None
    canManageIntegrations: Optional[bool] = None
    canManageMembers: Optional[bool] = None
    canManageProductPreferences: Optional[bool] = None
    canManageWebhook: Optional[bool] = None
    canRotateSdkKey: Optional[bool] = None
    canTagSetting: Optional[bool] = None
    canUseExportImport: Optional[bool] = None
    canViewProductAuditLog: Optional[bool] = None
    canViewProductStatistics: Optional[bool] = None
    canViewSdkKey: Optional[bool] = None
    environmentAccesses: Optional[List[EnvironmentAccessModel]] = None
    name: Optional[str] = None
    newEnvironmentAccessType: Optional[EnvironmentAccessType] = None
    permissionGroupId: Optional[int_aliased] = None
    product: Optional[ProductModel] = None


class PermissionGroupModelHaljson(BaseModel):
    field_embedded: Optional[FieldEmbedded4] = Field(None, alias='_embedded')
    field_links: Optional[FieldLinks9] = Field(None, alias='_links')
    accessType: Optional[AccessType] = None
    canCreateOrUpdateConfig: Optional[bool] = None
    canCreateOrUpdateEnvironment: Optional[bool] = None
    canCreateOrUpdateSegments: Optional[bool] = None
    canCreateOrUpdateSetting: Optional[bool] = None
    canCreateOrUpdateTag: Optional[bool] = None
    canDeleteConfig: Optional[bool] = None
    canDeleteEnvironment: Optional[bool] = None
    canDeleteSegments: Optional[bool] = None
    canDeleteSetting: Optional[bool] = None
    canDeleteTag: Optional[bool] = None
    canManageIntegrations: Optional[bool] = None
    canManageMembers: Optional[bool] = None
    canManageProductPreferences: Optional[bool] = None
    canManageWebhook: Optional[bool] = None
    canRotateSdkKey: Optional[bool] = None
    canTagSetting: Optional[bool] = None
    canUseExportImport: Optional[bool] = None
    canViewProductAuditLog: Optional[bool] = None
    canViewProductStatistics: Optional[bool] = None
    canViewSdkKey: Optional[bool] = None
    environmentAccesses: Optional[List[EnvironmentAccessModel]] = None
    name: Optional[str] = None
    newEnvironmentAccessType: Optional[EnvironmentAccessType] = None
    permissionGroupId: Optional[int_aliased] = None


class RolloutRuleModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    comparator: Optional[RolloutRuleComparator] = None
    comparisonAttribute: Optional[constr(min_length=0, max_length=1000)] = Field(
        None, description='The user attribute to compare.'
    )
    comparisonValue: Optional[constr(min_length=0, max_length=65535)] = Field(
        None, description='The value to compare against.'
    )
    segmentComparator: Optional[SegmentComparator] = None
    segmentId: Optional[UUID] = Field(
        None, description='The segment to compare against.'
    )
    value: Optional[Any] = Field(
        None,
        description='The value to serve when the comparison matches. It must respect the setting type.',
    )


class SettingDataModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    createdAt: Optional[datetime] = None
    creatorEmail: Optional[str] = None
    creatorFullName: Optional[str] = None
    hint: Optional[str] = None
    isWatching: Optional[bool] = None
    key: Optional[str] = None
    name: Optional[str] = None
    order: Optional[int_aliased] = None
    settingId: Optional[int_aliased] = None
    settingType: Optional[SettingType] = None


class SettingModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    configId: Optional[UUID] = None
    configName: Optional[str] = None
    hint: Optional[str] = None
    key: Optional[str] = None
    name: Optional[str] = None
    order: Optional[int_aliased] = None
    settingId: Optional[int_aliased] = None
    settingType: Optional[SettingType] = None
    tags: Optional[List[TagModel]] = None


class SettingModelHaljson(BaseModel):
    field_embedded: Optional[FieldEmbedded11] = Field(None, alias='_embedded')
    field_links: Optional[FieldLinks20] = Field(None, alias='_links')
    configId: Optional[UUID] = None
    configName: Optional[str] = None
    hint: Optional[str] = None
    key: Optional[str] = None
    name: Optional[str] = None
    order: Optional[int_aliased] = None
    settingId: Optional[int_aliased] = None
    settingType: Optional[SettingType] = None


class SettingValueModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    config: Optional[ConfigModel] = None
    environment: Optional[EnvironmentModel] = None
    integrationLinks: Optional[List[IntegrationLinkModel]] = None
    lastUpdaterUserEmail: Optional[str] = None
    lastUpdaterUserFullName: Optional[str] = None
    readOnly: Optional[bool] = None
    rolloutPercentageItems: Optional[List[RolloutPercentageItemModel]] = Field(
        None, description='The percentage rule collection.'
    )
    rolloutRules: Optional[List[RolloutRuleModel]] = Field(
        None, description='The targeting rule collection.'
    )
    setting: Optional[SettingDataModel] = None
    settingTags: Optional[List[SettingTagModel]] = None
    updatedAt: Optional[datetime] = None
    value: Optional[Any] = Field(
        None, description='The value to serve. It must respect the setting type.'
    )


class SettingValueModelHaljson(BaseModel):
    field_embedded: Optional[FieldEmbedded14] = Field(None, alias='_embedded')
    field_links: Optional[FieldLinks27] = Field(None, alias='_links')
    lastUpdaterUserEmail: Optional[str] = None
    lastUpdaterUserFullName: Optional[str] = None
    readOnly: Optional[bool] = None
    rolloutPercentageItems: Optional[List[RolloutPercentageItemModel]] = Field(
        None, description='The percentage rule collection.'
    )
    rolloutRules: Optional[List[RolloutRuleModel]] = Field(
        None, description='The targeting rule collection.'
    )
    updatedAt: Optional[datetime] = None
    value: Optional[Any] = Field(
        None, description='The value to serve. It must respect the setting type.'
    )


class UpdatePermissionGroupRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    accessType: Optional[AccessType] = None
    canCreateOrUpdateConfig: Optional[bool] = None
    canCreateOrUpdateEnvironment: Optional[bool] = None
    canCreateOrUpdateSegments: Optional[bool] = None
    canCreateOrUpdateSetting: Optional[bool] = None
    canCreateOrUpdateTag: Optional[bool] = None
    canDeleteConfig: Optional[bool] = None
    canDeleteEnvironment: Optional[bool] = None
    canDeleteSegments: Optional[bool] = None
    canDeleteSetting: Optional[bool] = None
    canDeleteTag: Optional[bool] = None
    canManageIntegrations: Optional[bool] = None
    canManageMembers: Optional[bool] = None
    canManageProductPreferences: Optional[bool] = None
    canManageWebhook: Optional[bool] = None
    canRotateSdkKey: Optional[bool] = None
    canTagSetting: Optional[bool] = None
    canUseExportImport: Optional[bool] = None
    canViewProductAuditLog: Optional[bool] = None
    canViewProductStatistics: Optional[bool] = None
    canViewSdkKey: Optional[bool] = None
    environmentAccesses: Optional[List[CreateOrUpdateEnvironmentAccessModel]] = None
    name: Optional[constr(min_length=0, max_length=255)] = None
    newEnvironmentAccessType: Optional[EnvironmentAccessType] = None


class UpdateSettingValueModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    rolloutPercentageItems: Optional[List[RolloutPercentageItemModel]] = Field(
        None, description='The percentage rule collection.'
    )
    rolloutRules: Optional[List[RolloutRuleModel]] = Field(
        None, description='The targeting rule collection.'
    )
    value: Optional[Any] = Field(
        None, description='The value to serve. It must respect the setting type.'
    )


class V1ConfigsConfigIdDeletedSettingsGetResponse(RootModel[List[SettingModelHaljson]]):
    root: List[SettingModelHaljson]


class V1ConfigsConfigIdDeletedSettingsGetResponse1(RootModel[List[SettingModel]]):
    root: List[SettingModel]


class V1ConfigsConfigIdSettingsGetResponse(RootModel[List[SettingModelHaljson]]):
    root: List[SettingModelHaljson]


class V1ConfigsConfigIdSettingsGetResponse1(RootModel[List[SettingModel]]):
    root: List[SettingModel]


class V1OrganizationsOrganizationIdAuditlogsGetResponse(
    RootModel[List[AuditLogItemModel]]
):
    root: List[AuditLogItemModel]


class V1ProductsProductIdAuditlogsGetResponse(RootModel[List[AuditLogItemModel]]):
    root: List[AuditLogItemModel]


class V1ProductsProductIdConfigsGetResponse1(RootModel[List[ConfigModel]]):
    root: List[ConfigModel]


class V1ProductsProductIdEnvironmentsGetResponse1(RootModel[List[EnvironmentModel]]):
    root: List[EnvironmentModel]


class V1ProductsProductIdPermissionsGetResponse(
    RootModel[List[PermissionGroupModelHaljson]]
):
    root: List[PermissionGroupModelHaljson]


class V1ProductsProductIdPermissionsGetResponse1(RootModel[List[PermissionGroupModel]]):
    root: List[PermissionGroupModel]


class V1TagsTagIdSettingsGetResponse(RootModel[List[SettingModelHaljson]]):
    root: List[SettingModelHaljson]


class V1TagsTagIdSettingsGetResponse1(RootModel[List[SettingModel]]):
    root: List[SettingModel]


class CodeReferenceRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    activeBranches: Optional[List[str]] = Field(
        None,
        description='The currently active branches of the repository. Each previously uploaded report that belongs to a non-reported active branch is being deleted.',
    )
    branch: constr(min_length=0, max_length=255) = Field(
        ...,
        description='The source control branch on where the scan was performed. (Source of the branch selector on the ConfigCat Dashboard)',
    )
    commitHash: Optional[constr(min_length=0, max_length=255)] = Field(
        None,
        description="The related commit's hash. (Appears on the ConfigCat Dashboard)",
    )
    commitUrl: Optional[constr(min_length=0, max_length=1000)] = Field(
        None,
        description="The related commit's URL. (Appears on the ConfigCat Dashboard)",
    )
    configId: UUID = Field(
        ..., description="The Config's identifier the scanning was performed against."
    )
    flagReferences: Optional[List[FlagReference]] = Field(
        None, description='The actual code reference collection.'
    )
    repository: constr(min_length=0, max_length=255) = Field(
        ...,
        description='The source control repository that contains the scanned code. (Source of the repository selector on the ConfigCat Dashboard)',
    )
    uploader: Optional[constr(min_length=0, max_length=255)] = Field(
        None,
        description="The scanning tool's name. (Appears on the ConfigCat Dashboard)",
    )


class ConfigSettingValueModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    integrationLinks: Optional[List[IntegrationLinkModel]] = None
    lastUpdaterUserEmail: Optional[str] = None
    lastUpdaterUserFullName: Optional[str] = None
    rolloutPercentageItems: Optional[List[RolloutPercentageItemModel]] = Field(
        None, description='The percentage rule collection.'
    )
    rolloutRules: Optional[List[RolloutRuleModel]] = Field(
        None, description='The targeting rule collection.'
    )
    setting: Optional[SettingDataModel] = None
    settingTags: Optional[List[SettingTagModel]] = None
    updatedAt: Optional[datetime] = None
    value: Optional[Any] = Field(
        None, description='The value to serve. It must respect the setting type.'
    )


class ConfigSettingValuesModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    config: Optional[ConfigModel] = None
    environment: Optional[EnvironmentModel] = None
    readOnly: Optional[bool] = None
    settingValues: Optional[List[ConfigSettingValueModel]] = None


class IntegrationLinkDetail(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    config: Optional[ConfigModel] = None
    environment: Optional[EnvironmentModel] = None
    product: Optional[ProductModel] = None
    readOnly: Optional[bool] = None
    setting: Optional[SettingDataModel] = None
    status: Optional[str] = None


class IntegrationLinkDetailsModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    allIntegrationLinkCount: Optional[int_aliased] = None
    details: Optional[List[IntegrationLinkDetail]] = None


class JsonPatch(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    operations: Optional[List[PatchOperation]] = None


JsonNode.model_rebuild()
